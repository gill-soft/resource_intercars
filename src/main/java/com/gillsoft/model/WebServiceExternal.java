package com.gillsoft.model;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;

import javax.xml.namespace.QName;
import javax.xml.ws.Binding;
import javax.xml.ws.BindingProvider;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.handler.Handler;

import com.gillsoft.client.Config;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "WebServiceExternal", targetNamespace = "http://tempuri.org/", wsdlLocation = "http://api.intercars-tickets.com/webservices/WebServiceExternal.asmx?WSDL")
public class WebServiceExternal
    extends Service
{

    private final static URL WEBSERVICEEXTERNAL_WSDL_LOCATION;
    private final static WebServiceException WEBSERVICEEXTERNAL_EXCEPTION;
    private final static QName WEBSERVICEEXTERNAL_QNAME = new QName("http://tempuri.org/", "WebServiceExternal");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL(Config.getUrl());
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        WEBSERVICEEXTERNAL_WSDL_LOCATION = url;
        WEBSERVICEEXTERNAL_EXCEPTION = e;
    }

    public WebServiceExternal() {
        super(__getWsdlLocation(), WEBSERVICEEXTERNAL_QNAME);
    }

    public WebServiceExternal(WebServiceFeature... features) {
        super(__getWsdlLocation(), WEBSERVICEEXTERNAL_QNAME, features);
    }

    public WebServiceExternal(URL wsdlLocation) {
        super(wsdlLocation, WEBSERVICEEXTERNAL_QNAME);
    }

    public WebServiceExternal(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, WEBSERVICEEXTERNAL_QNAME, features);
    }

    public WebServiceExternal(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WebServiceExternal(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns WebServiceExternalSoap
     */
    @SuppressWarnings("rawtypes")
	@WebEndpoint(name = "WebServiceExternalSoap")
    public WebServiceExternalSoap getWebServiceExternalSoap() {
    	WebServiceExternalSoap w = super.getPort(new QName("http://tempuri.org/", "WebServiceExternalSoap"), WebServiceExternalSoap.class);
    	Binding binding = ((BindingProvider) w).getBinding();
		List<Handler> handlerList = binding.getHandlerChain();
        handlerList.add(new LogHandler());
        binding.setHandlerChain(handlerList);
        return w;
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WebServiceExternalSoap
     */
    @WebEndpoint(name = "WebServiceExternalSoap")
    public WebServiceExternalSoap getWebServiceExternalSoap(WebServiceFeature... features) {
        return super.getPort(new QName("http://tempuri.org/", "WebServiceExternalSoap"), WebServiceExternalSoap.class, features);
    }

    private static URL __getWsdlLocation() {
        if (WEBSERVICEEXTERNAL_EXCEPTION!= null) {
            throw WEBSERVICEEXTERNAL_EXCEPTION;
        }
        return WEBSERVICEEXTERNAL_WSDL_LOCATION;
    }

}
